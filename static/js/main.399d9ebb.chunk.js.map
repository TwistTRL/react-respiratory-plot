{"version":3,"sources":["lib/RespiratoryTypeYAxisSlabGrid.js","lib/RespiratoryTypeYAxisPanel.js","lib/RespiratoryScorePlot.js","lib/RespiratoryPlotBundle.js","lib/index.js","sampleData.js","index.js"],"names":["SLAB","start","end","color","RespiratoryTypeYAxisSlabGrid","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ref","React","createRef","_this$props","width","height","react_default","a","createElement","style","display","draw","_this$props2","minY","maxY","ctx","current","getContext","clearRect","_i","_SLAB","length","row","Math","round","toDomYCoord_Linear","fillStyle","fillRect","PureComponent","CATEGORY_STRUCTURE","name","backgroundColor","children","RespiratoryTypeYAxisPanel","react_plot_axis_panel_dist","categoryStructure","COLOR_MAP","RSV_X_KEY","RespiratoryScorePlot","getSortedRSV","memoize_one","RSV","sort","b","getX","map","rec","respiratorySupportVariable","iNOAdministration","anestheticsAdministration","minX","maxX","sortedRSV","sortedRSVInRange","getSortedRSVInRange","sortedPoints","getSortedPoints","iNOInRange","getINOInRange","iNOPair","getINOPair","anestheticsInRange","getAnestheticsInRange","anestheticsPair","getAnestheticsPair","yOrigin","fillStepPlot","sortedX","startIdx","max","bisect_left","endIdx","min","bisect_right","slice","obj","domX","toDomXCoord_Linear","domY","filter","startDomX","endDomX","l","beginPath","prevP","moveTo","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","p","value","lineTo","err","return","closePath","fill","save","globalCompositeOperation","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","drawWidth","restore","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","strokeStyle","stroke","LOCATION_PANEL_STRUCTURE","TIME_PANEL_STRUCTURE","RespiratoryPlotBundle","indexLocation","location","indexArrayBy","indexRSV","selectLocation","location__selectedLocationID","setState","selectCrosshair","crosshairX","crosshairUpdateHandler","selectTooltip","tooltip__hoveringTimeStamp","tooltip__selectedLocationID","tooltip__selectedRespiratorySupportVariableID","tooltip__hoveringClientX","tooltip__hoveringClientY","handleRangerUpdating","startX","endX","rangerUpdatingHandler","handleRangerUpdate","rangerUpdateHandler","handleRangerClick","rangerClickHandler","handlePlotDblClick","plotDblClickHandler","state","_this2","_this$state","locationMap","RSVMap","plotWidth","plotHeight","react_plot_containers_dist","leftWidth","rightWidth","topHeight","bottomHeight","rowHeight","react_location_plot_dist_default","data","react_location_plot_dist","selection","react_plot_interaction_box_dist","transitionGraph","INTERACTION_MODEL_BARE","render","interactions","Fragment","hoveringPosition","selectHandler","lib_RespiratoryTypeYAxisPanel","lib_RespiratoryTypeYAxisSlabGrid","react_plot_axis_dist","lib_RespiratoryScorePlot","react_plot_vertical_crosshair_dist_default","X","react_plot_vertical_crosshair_dist","react_respiratoryscore_tooltip_dist","react_onplot_xranger_dist_default","snap","showHandle","updatingHandler","updateHandler","clickHandler","tickPosition","position","left","pointerEvents","react_plot_gradient_overlay_dist_default","react_respiratoryscore_tooltip_dist_default","timeStamp","ECMOVADVariable","respiratorySuppportVariable","clientX","clientY","array","key","ret","random","stretch","num","targetMin","targetMax","sample","rand","floor","mask_object","newObj","objectSpread","_Object$keys","keys","k","RESPIRATORY_SUPPORT_VARIABLE_TEMPLATE","AIRWAY_ASSESSMENT","APRV_PHIGH","APRV_PLOW","APRV_PS","BIPAP_EPAP","BIPAP_IPAP","BIPAP_RATE","C_STAT","CPAP","CPAP_FLOW","ETCO2","ETT_SIZE","FIO2","FLOW_RATE","HE","HFJV_ITIME","HFJV_MAP","HFJV_MONITORED_PEEP","HFJV_PIP","HFJV_RATE","HFNC","HFOV_AMPLITUDE","HFOV_BIAS_FLOW","HFOV_FREQUENCY","HFOV_ITIME","HFOV_MODEL","HFOV_POWER","INO_DOSE","ITIME","MAP","MASK","MODE","MVE","NAVA","OXYGEN_FIO2_DELIVERY_DEVICE","OXYGEN_LMIN_DELIVERY_DEVICE","OXYGEN_SOURCE","PEEP","PIP","PPLAT","PS","RESPIRATORY_RATE","RISE_TIME","TV","TV_MAND","TV_SPONT","VENT_RATE","RST","RSS","RST_CHOICE","DATA_MIN_X","DATA_MAX_X","RESPIRTORY_SUPPORT_VARIABLE","last","i","TIME","ID","push","timeMax","apply","toConsumableArray","_ref","forEach","INO_ADMINISTRATION","START","_ref2","END","ANESTHETICS_ADMINISTRATION","_ref3","LOCATION","NAME","n","App","handleCrosshairUpdate","_this$state2","lib","Component","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.399d9ebb.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {toDomYCoord_Linear} from \"plot-utils\";\n\nconst SLAB = [{start:0,end:5,color:\"#fffef9\"},\n              {start:5,end:15,color:\"#fff7e4\"},\n              {start:15,end:25,color:\"#fffef9\"},\n              {start:25,end:35,color:\"#fff7e4\"},\n              {start:35,end:70,color:\"#fffef9\"},\n              {start:70,end:80,color:\"#fff7e4\"},\n              {start:80,end:100,color:\"#fffef9\"},\n              ];\n\nclass RespiratoryTypeYAxisSlabGrid extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let {width,height} = this.props;\n    return (\n      <canvas ref={this.ref}  width={1} height={height}\n                              style={{width:width,height:height,display:\"block\"}}\n                              >\n      </canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minY,maxY,\n          height} = this.props;\n    // Plot\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,1,height);\n    for (let row of SLAB){\n      let start = Math.round(toDomYCoord_Linear(height,minY,maxY,row.end));\n      let end = Math.round(toDomYCoord_Linear(height,minY,maxY,row.start));\n      ctx.fillStyle = row.color;\n      ctx.fillRect(0,start,1,end-start);\n    }\n  }\n}\n\nRespiratoryTypeYAxisSlabGrid.propTypes = {\n  minY: PropTypes.number.isRequired,\n  maxY: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n}\n\nexport default RespiratoryTypeYAxisSlabGrid;\n\n\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {LinearSpaceYPanel} from \"react-plot-axis-panel\";\n\nconst CATEGORY_STRUCTURE = [\n  {name:\"\",backgroundColor:\"#a8e6e3\",\n    start:0,end:25,\n    children:[{name:\"MASK/BB/NC\",start:0,end:5},\n              {name:\"HFNC/CPAP\",start:5,end:15},\n              {name:\"BIPAP\",start:15,end:25}\n              ]},\n  {name:\"\",backgroundColor:\"#fb8730\",\n    start:25,end:80,\n    children:[{name:\"BVM/PSV\",start:25,end:35},\n              {name:\"PCV/VCV\",start:35,end:70},\n              {name:\"HFOV/HFJV\",start:70,end:80}\n              ]},\n  {name:\"\",backgroundColor:\"#ee1621\",\n    start:80,end:100,\n    children:[{name:\"ECMO\",start:80,end:100}]},\n]\n\nclass RespiratoryTypeYAxisPanel extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let {width,height,minY,maxY} = this.props;\n    return (\n      <LinearSpaceYPanel  categoryStructure={CATEGORY_STRUCTURE}\n                          height={height}\n                          width={width}\n                          minY={minY}\n                          maxY={maxY}\n                          />\n    );\n  }\n}\n\nRespiratoryTypeYAxisPanel.propTypes = {\n  minY: PropTypes.number.isRequired,\n  maxY: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n}\n\nexport default RespiratoryTypeYAxisPanel;\n\n\n","import React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {memoize_one} from \"memoize\";\nimport {bisect_left, bisect_right} from \"bisect\";\nimport {toDomXCoord_Linear,\n        toDomYCoord_Linear} from \"plot-utils\";\n\nconst COLOR_MAP = {\n  \"fill\":\"rgba(0,0,230,0.2)\",\n  \"stroke\":\"rgb(0,0,230)\",\n  \"iNOAdministration\":\"red\",\n  \"anestheticsAdministration\":\"green\",\n};\n\nconst RSV_X_KEY = \"TIME\";\nconst RSV_Y_KEY = \"RSS\";\nconst INO_START_KEY = \"START\";\nconst INO_END_KEY = \"END\";\nconst ANESTHETICS_START_KEY = \"START\";\nconst ANESTHETICS_END_KEY = \"END\";\n\nclass RespiratoryScorePlot extends PureComponent {\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  render() {\n    let { width,height } = this.props;\n    return (\n      <canvas ref={this.ref} height={height} width={width} style={{display:\"block\",width:width,height:height}}></canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate(){\n    this.draw();\n  }\n\n  draw() {\n    let { respiratorySupportVariable,\n          iNOAdministration,\n          anestheticsAdministration,\n          minX,maxX,width,\n          minY,maxY,height\n          } = this.props;\n    let sortedRSV = this.getSortedRSV(respiratorySupportVariable);\n    let sortedRSVInRange = this.getSortedRSVInRange(sortedRSV,minX,maxX);\n    let sortedPoints = this.getSortedPoints(sortedRSVInRange,width,minX,maxX,height,minY,maxY);\n    let iNOInRange = this.getINOInRange(iNOAdministration,minX,maxX);\n    let iNOPair = this.getINOPair(iNOInRange,width,minX,maxX,height,minY,maxY);\n    let anestheticsInRange = this.getAnestheticsInRange(anestheticsAdministration,minX,maxX);\n    let anestheticsPair = this.getAnestheticsPair(anestheticsInRange,width,minX,maxX,height,minY,maxY);\n    // Clear plots\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    // fill step plot\n    let yOrigin = toDomYCoord_Linear(height,minY,maxY,0);\n    this.fillStepPlot(ctx,width,height,yOrigin,sortedPoints,iNOPair,anestheticsPair);\n  }\n\n  getSortedRSV = memoize_one( (RSV)=>{\n    return RSV.sort( (a,b)=>a[RSV_X_KEY]-b[RSV_X_KEY] );\n  });\n\n  getX = memoize_one( (RSV)=>{\n    return RSV.map( (rec)=>rec[RSV_X_KEY] );\n  });\n\n  getSortedRSVInRange(sortedRSV,minX,maxX) {\n    let sortedX = this.getX(sortedRSV);\n    let startIdx = Math.max(0,bisect_left(sortedX,minX));\n    let endIdx = Math.min(bisect_right(sortedX,maxX),sortedRSV.length-1);\n    return sortedRSV.slice(startIdx,endIdx+1);\n  }\n\n  getSortedPoints(sortedRSV,width,minX,maxX,height,minY,maxY) {\n    let sortedPoints = sortedRSV.map( obj=>{\n        let domX = toDomXCoord_Linear(width,minX,maxX,obj[RSV_X_KEY]);\n        let domY = toDomYCoord_Linear(height,minY,maxY,obj[RSV_Y_KEY]);\n        return {domX,domY};\n      });\n    return sortedPoints;\n  }\n\n  getINOInRange(iNOAdministration,minX,maxX){\n    return iNOAdministration.filter( (rec)=>!(rec[INO_END_KEY]<=minX || rec[INO_START_KEY]>=maxX) );\n  }\n\n  getINOPair(iNOAdministration,width,minX,maxX,height,minY,maxY) {\n    let iNOPair = iNOAdministration.map( obj=>{\n        let startDomX = toDomXCoord_Linear(width,minX,maxX,obj[INO_START_KEY]);\n        let endDomX = toDomXCoord_Linear(width,minX,maxX,obj[INO_END_KEY]);\n        return {startDomX,endDomX};\n      });\n    return iNOPair;\n  }\n\n  getAnestheticsInRange(anestheticsAdministration,minX,maxX){\n    return anestheticsAdministration.filter( (rec)=>!(rec[ANESTHETICS_END_KEY]<=minX || rec[ANESTHETICS_START_KEY]>=maxX) );\n  }\n\n  getAnestheticsPair(anestheticsAdministration,width,minX,maxX,height,minY,maxY) {\n    let anestheticsPair = anestheticsAdministration.map( obj=>{\n        let startDomX = toDomXCoord_Linear(width,minX,maxX,obj[ANESTHETICS_START_KEY]);\n        let endDomX = toDomXCoord_Linear(width,minX,maxX,obj[ANESTHETICS_END_KEY]);\n        return {startDomX,endDomX};\n      });\n    return anestheticsPair;\n  }\n  \n  fillStepPlot( ctx,width,height,yOrigin,sortedPoints,\n                iNOPair,anestheticsPair) {\n    let l = sortedPoints.length;\n    if (l===0 || l===1) {\n      return;\n    }\n    // Fill\n    {\n      ctx.beginPath();\n      let prevP = {domX:sortedPoints[0][\"domX\"],domY:yOrigin};\n      ctx.moveTo(prevP[\"domX\"],prevP[\"domY\"]);\n      for (let p of sortedPoints) {\n        ctx.lineTo(p[\"domX\"],prevP[\"domY\"]);\n        ctx.lineTo(p[\"domX\"],p[\"domY\"]);\n        prevP = p;\n      }\n      ctx.lineTo(sortedPoints[l-1][\"domX\"],yOrigin);\n      ctx.closePath();\n      ctx.fillStyle = COLOR_MAP[\"fill\"];\n      ctx.fill();\n    }\n    // Shade iNO\n    {\n      ctx.save();\n      ctx.globalCompositeOperation = \"source-atop\";\n      ctx.fillStyle = COLOR_MAP[\"iNOAdministration\"];\n      for (let rec of iNOPair) {\n        let startDomX = Math.round(rec[\"startDomX\"]);\n        let endDomX = Math.round(rec[\"endDomX\"]);\n        let drawWidth = endDomX-startDomX;\n        if (drawWidth===0) {\n          continue;\n        }\n        ctx.fillRect(startDomX,0,drawWidth,height);\n      }\n      ctx.restore();\n    }\n    // Shade anesthetics\n    {\n      ctx.save();\n      ctx.globalCompositeOperation = \"source-atop\";\n      ctx.fillStyle = COLOR_MAP[\"anestheticsAdministration\"];\n      for (let rec of anestheticsPair) {\n        let startDomX = Math.round(rec[\"startDomX\"]);\n        let endDomX = Math.round(rec[\"endDomX\"]);\n        let drawWidth = endDomX-startDomX;\n        if (drawWidth===0) {\n          continue;\n        }\n        ctx.fillRect(startDomX,0,drawWidth,height);\n      }\n      ctx.restore();\n    }\n    // Line\n    {\n      ctx.beginPath();\n      let prevP = {domX:sortedPoints[0][\"domX\"],domY:sortedPoints[0][\"domY\"]};\n      ctx.moveTo(prevP[\"domX\"],prevP[\"domY\"]);\n      for (let p of sortedPoints) {\n        ctx.lineTo(p[\"domX\"],prevP[\"domY\"]);\n        ctx.lineTo(p[\"domX\"],p[\"domY\"]);\n        prevP = p;\n      }\n      ctx.strokeStyle = COLOR_MAP[\"stroke\"];\n      ctx.stroke();\n    }\n  }\n}\n\nexport default RespiratoryScorePlot;\n","import React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {memoize_one} from \"memoize\";\n// Components\nimport {PlotContainer, PlotSubContainer} from \"react-plot-containers\";\nimport {StaticYPanel} from \"react-plot-axis-panel\";\nimport {DateXAxis, DateVerticalLineGrid} from \"react-plot-axis\";\nimport GradientOverlay from \"react-plot-gradient-overlay\";\nimport LocationPlot, {LocationPlotSelectionLabel,LocationPlotHoverSelector} from \"react-location-plot\";\nimport {PlotInteractionProvider,INTERACTION_MODEL_BARE} from \"react-plot-interaction-box\";\nimport VerticalCrosshair, {VerticalCrosshairSelector} from \"react-plot-vertical-crosshair\";\nimport RespiratoryScoresTooltip, {RespiratoryScoresTooltipSelector} from \"react-respiratoryscore-tooltip\";\nimport OnPlotXRanger from \"react-onplot-xranger\";\n// Some specialized components\nimport RespiratoryTypeYAxisSlabGrid from \"./RespiratoryTypeYAxisSlabGrid\";\nimport RespiratoryTypeYAxisPanel from \"./RespiratoryTypeYAxisPanel\";\nimport RespiratoryScorePlot from \"./RespiratoryScorePlot\";\n\nconst MINY = 0;\nconst MAXY = 100;\n\nconst LEFT_WIDTH = 150\nconst RIGHT_WIDTH = 0\nconst TOP_HEIGHT = 30\nconst BOTTOM_HEIGHT = 30\n\nconst LOCATION_PANEL_STRUCTURE = [\n  {name:\"\",backgroundColor:\"#656565\",children:[{name:\"Location\",backgroundColor:\"#feddaa\"}]},\n];\n\nconst TIME_PANEL_STRUCTURE = [\n  {name:\"\",backgroundColor:\"#656565\",children:[{name:\"Time\",backgroundColor:\"#feddaa\"}]},\n];\n\nclass RespiratoryPlotBundle extends PureComponent {\n  constructor(props){\n    super(props);\n    this.state = {tooltip__selectedLocationID: null,\n                  tooltip__selectedRespiratorySupportVariableID: null,\n                  tooltip__hoveringTimeStamp: null,\n                  tooltip__hoveringClientX: null,\n                  tooltip__hoveringClientY: null,\n                  location__selectedLocationID: null,\n                  };\n  }\n  \n  render(){\n    let { minX,maxX,width,height,\n          respiratorySupportVariable,\n          iNOAdministration,\n          anestheticsAdministration,\n          location,\n          crosshairX,\n          startX,endX,\n          } = this.props;\n    let { tooltip__selectedLocationID,\n          tooltip__selectedRespiratorySupportVariableID,\n          tooltip__hoveringTimeStamp,\n          tooltip__hoveringClientX,\n          tooltip__hoveringClientY,\n          location__selectedLocationID\n          } = this.state;\n    let locationMap = this.indexLocation(location);\n    let RSVMap = this.indexRSV(respiratorySupportVariable);\n    let plotWidth = width - LEFT_WIDTH - RIGHT_WIDTH;\n    let plotHeight = height - TOP_HEIGHT - BOTTOM_HEIGHT;\n    return (\n      <PlotContainer  leftWidth={LEFT_WIDTH}\n                      plotWidth={plotWidth}\n                      rightWidth={RIGHT_WIDTH}\n                      topHeight={TOP_HEIGHT}\n                      plotHeight={plotHeight}\n                      bottomHeight={BOTTOM_HEIGHT}\n                      >\n        {/*===========================*/}\n        <PlotSubContainer>\n          <StaticYPanel categoryStructure={LOCATION_PANEL_STRUCTURE}\n                        width={LEFT_WIDTH}\n                        height={TOP_HEIGHT}\n                        rowHeight={TOP_HEIGHT}\n                        />\n        </PlotSubContainer>\n        <PlotSubContainer>\n          <LocationPlot   width={plotWidth}\n                          height={TOP_HEIGHT}\n                          minX={minX}\n                          maxX={maxX}\n                          data={location}\n                          />\n          <LocationPlotSelectionLabel width={plotWidth}\n                                      height={TOP_HEIGHT}\n                                      minX={minX}\n                                      maxX={maxX}\n                                      data={location}\n                                      selection={location__selectedLocationID}\n                                      />\n          <PlotInteractionProvider  width={plotWidth} height={TOP_HEIGHT}\n                                    transitionGraph={INTERACTION_MODEL_BARE}\n                                    render={(interactions)=>\n            <>\n              <LocationPlotHoverSelector  data={location}\n                                          minX={minX}\n                                          maxX={maxX}\n                                          width={plotWidth}\n                                          hoveringPosition={interactions.hoveringPosition}\n                                          selectHandler={this.selectLocation}\n                                          />\n            </>\n                                    }/>\n        </PlotSubContainer>\n        <PlotSubContainer>\n          {/*STUFF HERE*/}\n        </PlotSubContainer>\n        {/*===========================*/}\n        <PlotSubContainer>\n          <RespiratoryTypeYAxisPanel  width={LEFT_WIDTH}\n                                      height={plotHeight}\n                                      minY={MINY}\n                                      maxY={MAXY}\n                                      />\n        </PlotSubContainer>\n        <PlotSubContainer>\n          <RespiratoryTypeYAxisSlabGrid minY={MINY}\n                                        maxY={MAXY}\n                                        width={plotWidth}\n                                        height={plotHeight}\n                                        />\n          <DateVerticalLineGrid width={plotWidth}\n                                height={plotHeight}\n                                minX={minX}\n                                maxX={maxX}\n                                />\n          <RespiratoryScorePlot respiratorySupportVariable={respiratorySupportVariable}\n                                iNOAdministration={iNOAdministration}\n                                anestheticsAdministration={anestheticsAdministration}\n                                minX={minX} maxX={maxX} width={plotWidth}\n                                minY={0} maxY={100} height={plotHeight}\n                                />\n          <VerticalCrosshair  width={plotWidth}\n                              height={plotHeight}\n                              minX={minX}\n                              maxX={maxX}\n                              X={crosshairX}\n                              />\n          <PlotInteractionProvider  width={plotWidth} height={plotHeight}\n                                    transitionGraph={INTERACTION_MODEL_BARE}\n                                    render={(interactions)=>\n            <>\n              <VerticalCrosshairSelector  width={plotWidth}\n                                          minX={minX}\n                                          maxX={maxX}\n                                          hoveringPosition={interactions[\"hoveringPosition\"]}\n                                          selectHandler={this.selectCrosshair}\n                                          />\n              <LocationPlotHoverSelector  data={location}\n                                          minX={minX}\n                                          maxX={maxX}\n                                          width={plotWidth}\n                                          hoveringPosition={interactions.hoveringPosition}\n                                          selectHandler={this.selectLocation}\n                                          />\n              <RespiratoryScoresTooltipSelector hoveringPosition={interactions.hoveringPosition}\n                                                width={plotWidth}\n                                                minX={minX}\n                                                maxX={maxX}\n                                                location={location}\n                                                respiratorySupportVariable={respiratorySupportVariable}\n                                                selectHandler={this.selectTooltip}\n                                                />\n              <OnPlotXRanger  minX={minX}\n                              maxX={maxX}\n                              width={plotWidth}\n                              height={plotHeight}\n                              startX={startX}\n                              endX={endX}\n                              snap={3600*1000}\n                              showHandle={true}\n                              updatingHandler={ this.handleRangerUpdating }\n                              updateHandler={ this.handleRangerUpdate }\n                              clickHandler={ this.handleRangerClick }\n                              />\n            </>\n                                    }/>\n        </PlotSubContainer>\n        <PlotSubContainer>\n          {/*STUFF HERE*/}\n        </PlotSubContainer>\n        {/*===========================*/}\n        <PlotSubContainer>\n          <StaticYPanel categoryStructure={TIME_PANEL_STRUCTURE}\n                        width={LEFT_WIDTH}\n                        height={BOTTOM_HEIGHT}\n                        rowHeight={BOTTOM_HEIGHT}\n                        />\n        </PlotSubContainer>\n        <PlotSubContainer>\n          <div style={{width:plotWidth,height:BOTTOM_HEIGHT,backgroundColor:\"#feddaa\"}}></div>\n          <DateXAxis  width={plotWidth}\n                      height={BOTTOM_HEIGHT}\n                      minX={minX}\n                      maxX={maxX}\n                      tickPosition={\"top\"}\n                      />\n        </PlotSubContainer>\n        <PlotSubContainer>\n          {/*STUFF HERE*/}\n        </PlotSubContainer>\n        {/*Other absolutely positioned stuff*/}\n        <div style={{position:\"absolute\",left:LEFT_WIDTH,pointerEvents:\"none\"}}>\n          <GradientOverlay  width={10}\n                            height={height}\n                            />\n          <RespiratoryScoresTooltip timeStamp={tooltip__hoveringTimeStamp}\n                                    location={tooltip__selectedLocationID===null?null:locationMap[tooltip__selectedLocationID]}\n                                    ECMOVADVariable={null}\n                                    respiratorySuppportVariable={tooltip__selectedRespiratorySupportVariableID===null?null: RSVMap[tooltip__selectedRespiratorySupportVariableID]}\n                                    clientX={tooltip__hoveringClientX}\n                                    clientY={tooltip__hoveringClientY}\n                                    />\n        </div>\n      </PlotContainer>\n    );\n  }\n\n  indexArrayBy(array,key) {\n    let ret = {};\n    for (let rec of array) {\n      ret[rec[key]] = rec;\n    }\n    return ret;\n  }\n\n  indexLocation = memoize_one((location)=>{\n    return this.indexArrayBy(location,\"ID\");\n  });\n\n  indexRSV = memoize_one((respiratorySupportVariable)=>{\n    return this.indexArrayBy(respiratorySupportVariable,\"ID\");\n  });\n\n  selectLocation = (location__selectedLocationID)=>{\n    this.setState({location__selectedLocationID});\n  }\n  \n  selectCrosshair = (crosshairX)=>{\n    let {crosshairUpdateHandler} = this.props;\n    crosshairUpdateHandler(crosshairX)\n  }\n\n  selectTooltip =  (tooltip__hoveringTimeStamp,\n                    tooltip__selectedLocationID,\n                    tooltip__selectedRespiratorySupportVariableID,\n                    tooltip__hoveringClientX,\n                    tooltip__hoveringClientY\n                    )=>{\n    this.setState({ tooltip__hoveringTimeStamp,\n                    tooltip__selectedRespiratorySupportVariableID,\n                    tooltip__selectedLocationID,\n                    tooltip__hoveringClientX,\n                    tooltip__hoveringClientY});\n  }\n\n  handleRangerUpdating = (startX,endX)=>{\n    let {rangerUpdatingHandler} = this.props;\n    rangerUpdatingHandler(startX,endX);\n  }\n\n  handleRangerUpdate = (startX,endX)=>{\n    let {rangerUpdateHandler} = this.props;\n    rangerUpdateHandler(startX,endX);\n  }\n\n  handleRangerClick = ()=>{\n    let {rangerClickHandler} = this.props;\n    rangerClickHandler();\n  }\n  \n  handlePlotDblClick = ()=>{\n    let {plotDblClickHandler} = this.props;\n    plotDblClickHandler();\n  }\n}\n\nRespiratoryPlotBundle.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  location: PropTypes.array.isRequired,\n  respiratorySupportVariable: PropTypes.array.isRequired,\n  iNOAdministration: PropTypes.array.isRequired,\n  anestheticsAdministration: PropTypes.array.isRequired,\n  rangerUpdateHandler: PropTypes.func.isRequired,\n  rangerClickHandler: PropTypes.func.isRequired,\n}\n\nexport default RespiratoryPlotBundle;\n","import RespiratoryPlotBundle from \"./RespiratoryPlotBundle\";\n\nexport default RespiratoryPlotBundle;\n","// HELPER FUNCTIONS\nfunction random(start,end) {\n  start = Math.min(start,end);\n  end = Math.max(start,end);\n  return Math.random()*(end-start)+start;\n}\n\nfunction stretch(num,min,max,targetMin,targetMax){\n  return (num-min)/(max-min)*(targetMax-targetMin)+targetMin;\n}\n\nfunction sample(array){\n  let rand = Math.random();\n  let randIdx = Math.floor(rand*array.length);\n  return array[randIdx];\n}\n\nfunction mask_object(obj) {\n  let newObj = {...obj};\n  for (let k of Object.keys(obj)) {\n    if (obj[k]===null || k===\"RST\") {\n      continue;\n    }\n    else {\n      if (Math.random()<0.5) {\n        newObj[k] = null;\n      }\n    }\n  }\n  return newObj;\n}\n\n// HELPER CONSTANTS\nconst RESPIRATORY_SUPPORT_VARIABLE_TEMPLATE = {\n  \"AIRWAY_ASSESSMENT\": \"xxxx\",\n  \"APRV_PHIGH\": 10,\n  \"APRV_PLOW\": 10,\n  \"APRV_PS\": 10,\n  \"BIPAP_EPAP\": 10,\n  \"BIPAP_IPAP\": 10,\n  \"BIPAP_RATE\": 10,\n  \"C_STAT\": 10,\n  \"CPAP\": 10,\n  \"CPAP_FLOW\": 10,\n  \"ETCO2\": 10,\n  \"ETT_SIZE\": 10,\n  \"FIO2\": 10,\n  \"FLOW_RATE\": 10,\n  \"HE\": 10,\n  \"HFJV_ITIME\": 10,\n  \"HFJV_MAP\": 10,\n  \"HFJV_MONITORED_PEEP\": 10,\n  \"HFJV_PIP\": 10,\n  \"HFJV_RATE\": 10,\n  \"HFNC\": 10,\n  \"HFOV_AMPLITUDE\": 10,\n  \"HFOV_BIAS_FLOW\": 10,\n  \"HFOV_FREQUENCY\": 10,\n  \"HFOV_ITIME\": \"%\",\n  \"HFOV_MODEL\": 10,\n  \"HFOV_POWER\": 10,\n  \"INO_DOSE\": 10,\n  \"ITIME\": 10,\n  \"MAP\": 10,\n  \"MASK\": \"Small\",\n  \"MODE\": 10,\n  \"MVE\": 10,\n  \"NAVA\": 10,\n  \"OXYGEN_FIO2_DELIVERY_DEVICE\": 10,\n  \"OXYGEN_LMIN_DELIVERY_DEVICE\": 10,\n  \"OXYGEN_SOURCE\": 10,\n  \"PEEP\": 10,\n  \"PIP\": 10,\n  \"PPLAT\": 10,\n  \"PS\": 10,\n  \"RESPIRATORY_RATE\": 10,\n  \"RISE_TIME\": 10,\n  \"TV\": 10,\n  \"TV_MAND\": 10,\n  \"TV_SPONT\": 10,\n  \"VENT_RATE\": 10,\n  \"RST\": null,\n  \"RSS\": null,\n  };\n\nconst RST_CHOICE = [\"RA\",\"MASK\",\"BB\",\"NC\",\"HFNC\",\n                    \"CPAP\",\"BIPAP\",\"BVM\",\"PSV\",\n                    \"PCV\",\"VCV\",\"HFOV\",\"HFJV\"];\n\n// SAMPLE DATA\nexport const DATA_MIN_X = 1508076120000;\n\nexport const DATA_MAX_X = 1509915960000;\n\nexport const RESPIRTORY_SUPPORT_VARIABLE = (function(){\n  let dataPointCount = 100;\n  let ret = [];\n  let last = null;\n  for (let i=0;i<dataPointCount;i++){\n    if (last===null) {\n      last = {\"TIME\":0,\"RST\":sample(RST_CHOICE),\"RSS\":random(0,100),\"ID\":i};\n    }\n    else {\n      last = {\"TIME\":last[\"TIME\"]+Math.random(),\"RST\":sample(RST_CHOICE),\"RSS\":random(0,100),\"ID\":i};\n    }\n    last = {...mask_object(RESPIRATORY_SUPPORT_VARIABLE_TEMPLATE),...last};\n    ret.push(last);\n  }\n  let timeMin = 0;\n  let timeMax = Math.max(...ret.map( ({TIME})=>TIME ));\n  ret.forEach( (rec)=>{\n      rec[\"TIME\"] = stretch(rec[\"TIME\"],timeMin,timeMax,DATA_MIN_X,DATA_MAX_X);\n    });\n  return ret;\n})();\n\nexport const ECMO_VARIABLES = [];\n\nexport const INO_ADMINISTRATION = (function(){\n  let dataPointCount = 3;\n  let ret = [];\n  let last = null;\n  for (let i=0;i<dataPointCount;i++){\n    if (last===null) {\n      last = {\"ID\":i,\"START\":Math.random()};\n      last[\"END\"] = last[\"START\"]+Math.random()*3;\n    }\n    else {\n      last = {\"ID\":i,\"START\":last[\"END\"]+Math.random()};\n      last[\"END\"] = last[\"START\"]+Math.random()*3;\n    }\n    ret.push(last);\n  }\n  let timeMin = 0;\n  let timeMax = Math.random()+Math.max(...ret.map( ({END})=>END ));\n  ret.forEach( (rec)=>{\n      rec[\"START\"] = stretch(rec[\"START\"],timeMin,timeMax,DATA_MIN_X,DATA_MAX_X);\n      rec[\"END\"] = stretch(rec[\"END\"],timeMin,timeMax,DATA_MIN_X,DATA_MAX_X);\n    });\n  return ret;\n})();\n\nexport const ANESTHETICS_ADMINISTRATION = (function(){\n  let dataPointCount = 3;\n  let ret = [];\n  let last = null;\n  for (let i=0;i<dataPointCount;i++){\n    if (last===null) {\n      last = {\"ID\":i,\"START\":Math.random()};\n      last[\"END\"] = last[\"START\"]+Math.random()*3;\n    }\n    else {\n      last = {\"ID\":i,\"START\":last[\"END\"]+Math.random()};\n      last[\"END\"] = last[\"START\"]+Math.random()*3;\n    }\n    ret.push(last);\n  }\n  let timeMin = 0;\n  let timeMax = Math.random()+Math.max(...ret.map( ({END})=>END ));\n  ret.forEach( (rec)=>{\n      rec[\"START\"] = stretch(rec[\"START\"],timeMin,timeMax,DATA_MIN_X,DATA_MAX_X);\n      rec[\"END\"] = stretch(rec[\"END\"],timeMin,timeMax,DATA_MIN_X,DATA_MAX_X);\n    });\n  return ret;\n})();\n\nexport const LOCATION = ( function(){\n  let dataPointCount = 10;\n  let name = [\"other\",\"home\",\"8s\",\"8e\"];\n  let ret = [];\n  let last = null;\n  for (let i=0;i<dataPointCount;i++){\n    if (last===null) {\n      last = {'NAME':sample(name),'START':0,'END':Math.random(),'ID':i};\n    }\n    else {\n      last = {'NAME':sample(name.filter( n=>n!==last[\"NAME\"] )),'START':last[\"END\"],'END':last[\"END\"]+Math.random(),'ID':i};\n    }\n    ret.push(last);\n  }\n  let timeMin = 0;\n  let timeMax = Math.max(...ret.map( (rec)=>rec[\"END\"] ));\n  ret.forEach( (rec)=>{\n      rec[\"END\"] = stretch(rec[\"END\"],timeMin,timeMax,DATA_MIN_X,DATA_MAX_X);\n      rec[\"START\"] = stretch(rec[\"START\"],timeMin,timeMax,DATA_MIN_X,DATA_MAX_X);\n    });\n  return ret;\n})();\n\n\nexport const PROCEDURES = [\n  {\"id\":'a',\"end\":1483135800000,\"name\":\"HLHS STAGE I, CARDIAC\",\"start\":1483104300000},\n  {\"id\":'b',\"end\":1483552800000,\"name\":\"CHEST CLOSURE, CARDIAC OFF UNIT\",\"start\":1483547400000},\n  {\"id\":'c',\"end\":1488291060000,\"name\":\"GASTROSTOMY, LAPAROSCOPIC, GENSURG\",\"start\":1488287040000},\n  {\"id\":'d',\"end\":1494281220000,\"name\":\"VESICOSTOMY CREATION/CLOSURE, GU\",\"start\":1494271440000},\n  {\"id\":'e',\"end\":1497321480000,\"name\":\"BIDIRECTIONAL GLEN SHUNT, CARDIAC\",\"start\":1497298500000}\n  ];\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport RespiratoryPlotBundle from \"./lib\";\nimport {DATA_MIN_X,DATA_MAX_X,\n        RESPIRTORY_SUPPORT_VARIABLE,\n        INO_ADMINISTRATION,\n        ANESTHETICS_ADMINISTRATION,\n        LOCATION} from \"./sampleData\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {startX:DATA_MAX_X-3600*1000*7,\n                  endX:DATA_MAX_X,\n                  minX: DATA_MIN_X,\n                  maxX: DATA_MAX_X\n                  };\n  }\n  \n  render() {\n    let { startX,endX,\n          minX,maxX,\n          crosshairX} = this.state;\n    return <RespiratoryPlotBundle height={400}\n                                  width={800}\n                                  minX={minX}\n                                  maxX={maxX}\n                                  startX={startX}\n                                  endX={endX}                                  \n                                  respiratorySupportVariable={RESPIRTORY_SUPPORT_VARIABLE}\n                                  iNOAdministration={INO_ADMINISTRATION}\n                                  anestheticsAdministration={ANESTHETICS_ADMINISTRATION}\n                                  location={LOCATION}\n                                  crosshairX={crosshairX}\n                                  rangerUpdatingHandler={this.handleRangerUpdating}\n                                  rangerUpdateHandler={this.handleRangerUpdate}\n                                  rangerClickHandler={this.handleRangerClick}\n                                  crosshairUpdateHandler={this.handleCrosshairUpdate}\n                                  />\n  }\n\n  handleCrosshairUpdate = (crosshairX)=>{\n    this.setState({crosshairX});\n  }\n\n  handleRangerUpdating = (startX,endX)=>{\n    this.setState({startX,endX});\n  }\n\n  handleRangerUpdate = (startX,endX)=>{\n    this.setState({startX,endX});\n  }\n\n  handleRangerClick = ()=>{\n    let {minX,maxX,startX,endX} = this.state;\n    if (startX===minX && endX===maxX) {\n      this.setState({ minX:DATA_MIN_X,\n                      maxX:DATA_MAX_X\n                      });\n    }\n    else {\n      this.setState({ minX:startX,\n                      maxX:endX\n                      });\n    }\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}